name: CD Pipeline - Crop Predictor

on:
  workflow_run:
    workflows: ["CI Pipeline - Crop Predictor"]
    types:
      - completed
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Download artifact from workflow run
        uses: actions/github-script@v7
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "crop-predictor-artifact"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/crop-predictor-artifact.zip`, Buffer.from(download.data));

      - name: Unzip and prepare deployment
        run: |
          unzip crop-predictor-artifact.zip
          ls -la deployment/

      - name: Stop existing applications on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Stop existing processes
            pkill -f "uvicorn app:app" || true
            pkill -f "streamlit run frontend.py" || true

            # Wait for processes to stop
            sleep 5

            # Create deployment directory
            mkdir -p ~/crop-predictor-app
            cd ~/crop-predictor-app
            rm -rf *

      - name: Copy application files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./deployment/*"
          target: "~/crop-predictor-app"
          strip_components: 1

      - name: Install dependencies and setup environment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/crop-predictor-app

            # Update system
            sudo apt update

            # Install Python and pip if not exists
            sudo apt install -y python3 python3-pip python3-venv

            # Create virtual environment
            python3 -m venv venv
            source venv/bin/activate

            # Upgrade pip
            pip install --upgrade pip

            # Install dependencies
            pip install -r requirements.txt

            # Create startup scripts
            cat > start_backend.sh << 'EOF'
            #!/bin/bash
            cd ~/crop-predictor-app
            source venv/bin/activate
            export MODEL_PATH="~/crop-predictor-app/model"
            nohup uvicorn app:app --host 0.0.0.0 --port 8000 > backend.log 2>&1 &
            echo $! > backend.pid
            EOF

            cat > start_frontend.sh << 'EOF'
            #!/bin/bash
            cd ~/crop-predictor-app
            source venv/bin/activate
            export FASTAPI_URL="http://localhost:8000"
            nohup streamlit run frontend.py --server.port 8501 --server.address 0.0.0.0 --server.headless true > frontend.log 2>&1 &
            echo $! > frontend.pid
            EOF

            cat > stop_services.sh << 'EOF'
            #!/bin/bash
            cd ~/crop-predictor-app
            if [ -f backend.pid ]; then
                kill $(cat backend.pid) 2>/dev/null || true
                rm backend.pid
            fi
            if [ -f frontend.pid ]; then
                kill $(cat frontend.pid) 2>/dev/null || true
                rm frontend.pid
            fi
            pkill -f "uvicorn app:app" || true
            pkill -f "streamlit run frontend.py" || true
            EOF

            # Make scripts executable
            chmod +x start_backend.sh start_frontend.sh stop_services.sh

      - name: Start applications
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/crop-predictor-app

            # Stop any existing services
            ./stop_services.sh

            # Wait a moment
            sleep 2

            # Start backend
            ./start_backend.sh

            # Wait for backend to start
            sleep 5

            # Start frontend
            ./start_frontend.sh

            # Wait for services to start
            sleep 5

      - name: Setup Nginx reverse proxy (Optional)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Install nginx if not present
            sudo apt install -y nginx

            # Create nginx config
            sudo tee /etc/nginx/sites-available/crop-predictor << 'EOF'
            server {
                listen 80;
                server_name ${{ secrets.EC2_HOST }};
                
                # Streamlit frontend
                location / {
                    proxy_pass http://localhost:8501;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_read_timeout 86400;
                }
                
                # FastAPI backend
                location /api/ {
                    proxy_pass http://localhost:8000/;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
