name: CD Pipeline - Crop Predictor

on:
  workflow_run:
    workflows: ["CI Pipeline - Crop Predictor"]
    types:
      - completed
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Download artifact from workflow run
        uses: actions/github-script@v7
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "crop-predictor-artifact"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/crop-predictor-artifact.zip`, Buffer.from(download.data));

      - name: Unzip and prepare deployment
        run: |
          unzip crop-predictor-artifact.zip
          # Create deployment directory and move files
          mkdir -p deployment
          # Move all extracted files to deployment directory (exclude the zip file itself)
          find . -maxdepth 1 -type f ! -name "crop-predictor-artifact.zip" ! -name "*.yml" ! -name "*.yaml" -exec mv {} deployment/ \;
          find . -maxdepth 1 -type d ! -name "." ! -name "deployment" ! -name ".git*" -exec mv {} deployment/ \;
          ls -la deployment/

      - name: Quick process cleanup
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 30s
          command_timeout: 15s
          script: |
            echo "Quick process cleanup..."
            # Fast kill without waiting
            pkill -9 -f "uvicorn app:app" 2>/dev/null || true
            pkill -9 -f "streamlit run frontend.py" 2>/dev/null || true
            echo "Processes killed"

      - name: Prepare deployment directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 30s
          command_timeout: 20s
          script: |
            echo "Setting up deployment directory..."
            mkdir -p ~/crop-predictor-app
            cd ~/crop-predictor-app
            rm -rf * || true
            echo "Directory ready"

      - name: Copy application files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./deployment/*"
          target: "~/crop-predictor-app"
          strip_components: 1

      - name: Install system dependencies
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 180s
          command_timeout: 120s
          script: |
            echo "Installing system dependencies..."
            # Update package list
            sudo apt update -y

            # Install required packages
            sudo apt install -y python3 python3-pip python3-venv python3-dev curl nginx

            echo "System dependencies installed"

      - name: Setup Python environment and install packages
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 300s
          command_timeout: 240s
          script: |
            cd ~/crop-predictor-app

            echo "Setting up Python environment..."

            # Create virtual environment
            python3 -m venv venv
            source venv/bin/activate

            # Upgrade pip
            pip install --upgrade pip

            # Install requirements
            if [ -f requirements.txt ]; then
                echo "Installing Python packages..."
                pip install -r requirements.txt
                echo "Packages installed successfully"
            else
                echo "ERROR: requirements.txt not found!"
                ls -la
                exit 1
            fi

            # Quick verification
            python3 -c "import uvicorn, streamlit, fastapi; print('Core packages verified')"

      - name: Create service scripts
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 60s
          script: |
            cd ~/crop-predictor-app

            echo "Creating service management scripts..."

            # Backend start script
            cat > start_backend.sh << 'EOF'
            #!/bin/bash
            cd ~/crop-predictor-app
            source venv/bin/activate
            export MODEL_PATH="~/crop-predictor-app/model"
            echo "Starting FastAPI backend..."
            nohup uvicorn app:app --host 0.0.0.0 --port 8000 > backend.log 2>&1 &
            echo $! > backend.pid
            echo "Backend PID: $(cat backend.pid)"
            EOF

            # Frontend start script
            cat > start_frontend.sh << 'EOF'
            #!/bin/bash
            cd ~/crop-predictor-app
            source venv/bin/activate
            export FASTAPI_URL="http://localhost:8000"
            echo "Starting Streamlit frontend..."
            nohup streamlit run frontend.py --server.port 8501 --server.address 0.0.0.0 --server.headless true > frontend.log 2>&1 &
            echo $! > frontend.pid
            echo "Frontend PID: $(cat frontend.pid)"
            EOF

            # Stop script
            cat > stop_all.sh << 'EOF'
            #!/bin/bash
            echo "Stopping all services..."
            if [ -f ~/crop-predictor-app/backend.pid ]; then
                kill $(cat ~/crop-predictor-app/backend.pid) 2>/dev/null || true
                rm -f ~/crop-predictor-app/backend.pid
            fi
            if [ -f ~/crop-predictor-app/frontend.pid ]; then
                kill $(cat ~/crop-predictor-app/frontend.pid) 2>/dev/null || true
                rm -f ~/crop-predictor-app/frontend.pid
            fi
            pkill -f "uvicorn app:app" 2>/dev/null || true
            pkill -f "streamlit run frontend.py" 2>/dev/null || true
            echo "Services stopped"
            EOF

            chmod +x start_backend.sh start_frontend.sh stop_all.sh
            echo "Scripts created and made executable"

      - name: Start backend service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 60s
          command_timeout: 30s
          script: |
            cd ~/crop-predictor-app

            echo "Starting backend service..."
            ./start_backend.sh

            # Wait and verify
            sleep 5
            if [ -f backend.pid ] && kill -0 $(cat backend.pid) 2>/dev/null; then
                echo "✓ Backend started successfully"
                # Test if it's responding
                for i in {1..5}; do
                    if curl -f http://localhost:8000 >/dev/null 2>&1; then
                        echo "✓ Backend is responding"
                        break
                    fi
                    echo "Waiting for backend response ($i/5)..."
                    sleep 2
                done
            else
                echo "✗ Backend failed to start"
                tail -10 backend.log 2>/dev/null || echo "No backend log"
                exit 1
            fi

      - name: Start frontend service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 90s
          command_timeout: 60s
          script: |
            cd ~/crop-predictor-app

            echo "Starting frontend service..."
            ./start_frontend.sh

            # Wait longer for Streamlit to start
            sleep 15
            if [ -f frontend.pid ] && kill -0 $(cat frontend.pid) 2>/dev/null; then
                echo "✓ Frontend process started"
                # Test if it's responding (Streamlit takes longer)
                for i in {1..10}; do
                    if curl -f http://localhost:8501 >/dev/null 2>&1; then
                        echo "✓ Frontend is responding"
                        break
                    fi
                    echo "Waiting for frontend response ($i/10)..."
                    sleep 3
                done
            else
                echo "⚠ Frontend may have issues"
                tail -10 frontend.log 2>/dev/null || echo "No frontend log"
                # Don't fail here, backend might still work
            fi

      - name: Configure nginx reverse proxy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 60s
          script: |
            echo "Configuring Nginx..."

            # Create nginx config
            sudo tee /etc/nginx/sites-available/crop-predictor > /dev/null << 'EOF'
            server {
                listen 80;
                server_name _;
                client_max_body_size 100M;
                
                # Streamlit frontend
                location / {
                    proxy_pass http://localhost:8501;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_read_timeout 86400;
                }
                
                # FastAPI backend
                location /api/ {
                    proxy_pass http://localhost:8000/;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
                
                location /health {
                    access_log off;
                    return 200 "healthy\n";
                    add_header Content-Type text/plain;
                }
            }
            EOF

            # Enable site
            sudo ln -sf /etc/nginx/sites-available/crop-predictor /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default

            # Test and restart nginx
            if sudo nginx -t; then
                sudo systemctl restart nginx
                sudo systemctl enable nginx
                echo "✓ Nginx configured and restarted"
            else
                echo "✗ Nginx configuration error"
                exit 1
            fi

      - name: Final deployment verification
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 60s
          script: |
            echo "=== FINAL DEPLOYMENT STATUS ==="

            # Check processes
            echo "Running processes:"
            if pgrep -f "uvicorn app:app" > /dev/null; then
                echo "✓ Backend (uvicorn) is running"
            else
                echo "✗ Backend not running"
            fi

            if pgrep -f "streamlit run frontend.py" > /dev/null; then
                echo "✓ Frontend (streamlit) is running"
            else
                echo "✗ Frontend not running"
            fi

            # Check ports
            echo "Listening ports:"
            netstat -tlnp 2>/dev/null | grep -E "(8000|8501|:80)" || echo "No application ports found"

            # Check nginx
            if sudo systemctl is-active --quiet nginx; then
                echo "✓ Nginx is active"
            else
                echo "✗ Nginx not active"
            fi

            # Get public IP for access URLs
            PUBLIC_IP=$(curl -s ifconfig.me 2>/dev/null || echo "YOUR_EC2_IP")

            echo ""
            echo "=== ACCESS INFORMATION ==="
            echo "🌐 Main Application: http://$PUBLIC_IP"
            echo "📊 Streamlit Direct: http://$PUBLIC_IP:8501"
            echo "🔧 FastAPI Direct: http://$PUBLIC_IP:8000"
            echo "💾 Logs location: ~/crop-predictor-app/"
            echo ""
            echo "✅ Deployment completed successfully!"

      - name: Create service management helper
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 30s
          script: |
            cat > ~/manage_crop_app.sh << 'EOF'
            #!/bin/bash
            APP_DIR="$HOME/crop-predictor-app"

            case "$1" in
                start)
                    echo "Starting Crop Predictor services..."
                    cd $APP_DIR
                    ./start_backend.sh
                    sleep 5
                    ./start_frontend.sh
                    echo "Services started. Check status with: $0 status"
                    ;;
                stop)
                    echo "Stopping Crop Predictor services..."
                    cd $APP_DIR
                    ./stop_all.sh
                    ;;
                restart)
                    echo "Restarting Crop Predictor services..."
                    cd $APP_DIR
                    ./stop_all.sh
                    sleep 3
                    ./start_backend.sh
                    sleep 5
                    ./start_frontend.sh
                    ;;
                status)
                    echo "=== Crop Predictor Status ==="
                    if pgrep -f "uvicorn app:app" > /dev/null; then
                        echo "✓ Backend is running"
                    else
                        echo "✗ Backend not running"
                    fi
                    
                    if pgrep -f "streamlit run frontend.py" > /dev/null; then
                        echo "✓ Frontend is running"
                    else
                        echo "✗ Frontend not running"
                    fi
                    
                    netstat -tlnp 2>/dev/null | grep -E "(8000|8501)" && echo "Ports are listening"
                    ;;
                logs)
                    echo "=== Recent logs ==="
                    echo "Backend log:"
                    tail -20 $APP_DIR/backend.log 2>/dev/null || echo "No backend log"
                    echo -e "\nFrontend log:"
                    tail -20 $APP_DIR/frontend.log 2>/dev/null || echo "No frontend log"
                    ;;
                *)
                    echo "Usage: $0 {start|stop|restart|status|logs}"
                    exit 1
                    ;;
            esac
            EOF

            chmod +x ~/manage_crop_app.sh
            echo "Created service management script at ~/manage_crop_app.sh"
            echo "Usage: ~/manage_crop_app.sh {start|stop|restart|status|logs}"
