name: CI Pipeline - Crop Predictor

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest httpx

      - name: Run backend tests
        run: |
          PYTHONPATH=${{ github.workspace }} pytest tests/ -v

  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run frontend tests
        run: |
          python -c "import streamlit; print('Streamlit ok')"
          python -c "exec(open('frontend.py').read().split('if __name__')[0])"

  build-and-package:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # --- Package artifacts ---
      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp app.py frontend.py requirements.txt deployment/ || true
          cp -r model src schema public deployment/ || true

          # (optional) startup scripts if you want
          cat > deployment/start_backend.sh << 'EOF'
          #!/bin/bash
          echo "Starting backend..."
          pip install -r requirements.txt
          fuser -k 8000/tcp || true
          nohup uvicorn app:app --host 0.0.0.0 --port 8000 > backend.log 2>&1 &
          EOF

          cat > deployment/start_frontend.sh << 'EOF'
          #!/bin/bash
          echo "Starting frontend..."
          pip install -r requirements.txt
          fuser -k 8501/tcp || true
          nohup streamlit run frontend.py --server.port 8501 --server.address 0.0.0.0 > frontend.log 2>&1 &
          EOF

          chmod +x deployment/start_*.sh

      - uses: actions/upload-artifact@v4
        with:
          name: crop-predictor-artifact
          path: deployment/
          retention-days: 4

      # --- Docker Build & Push ---
      - name: Log in to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
        run: echo $DOCKER_TOKEN | docker login -u $DOCKER_USERNAME --password-stdin

      - name: Set commit SHA tag
        id: vars
        run: echo "TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t siku9786/cicd-pipeline:latest -t siku9786/cicd-pipeline:${TAG} .

      - name: Push Docker image
        run: |
          docker push siku9786/cicd-pipeline:latest
          docker push siku9786/cicd-pipeline:${TAG}
