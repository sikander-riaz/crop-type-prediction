name: CI Pipeline - Crop Predictor

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest httpx

      - name: Run backend tests
        run: |
          PYTHONPATH=${{ github.workspace }} pytest tests/ -v

  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test frontend imports
        run: |
          python -c "import streamlit; print('Streamlit OK')"
          python -c "
          import sys
          with open('frontend.py', 'r') as f:
              code = f.read()
          # Remove streamlit.run() calls to avoid execution
          test_code = code.split('if __name__')[0]
          exec(compile(test_code, 'frontend.py', 'exec'))
          print('Frontend syntax OK')
          "

  build-and-package:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' # Only package on push, not PR
    steps:
      - uses: actions/checkout@v4

      - name: Create deployment package
        run: |
          mkdir -p deployment

          # Copy essential files (use find to handle missing files gracefully)
          cp app.py frontend.py requirements.txt deployment/ 2>/dev/null || true

          # Copy directories if they exist
          [ -d "model" ] && cp -r model deployment/ || true
          [ -d "src" ] && cp -r src deployment/ || true
          [ -d "schema" ] && cp -r schema deployment/ || true
          [ -d "public" ] && cp -r public deployment/ || true

          # Create startup scripts with proper error handling
          cat > deployment/start_backend.sh << 'EOF'
          #!/bin/bash
          set -e
          echo "Starting backend..."
          pip install -r requirements.txt
          # Kill existing process if running
          lsof -ti:8000 | xargs kill -9 2>/dev/null || true
          # Start backend in background
          nohup uvicorn app:app --host 0.0.0.0 --port 8000 > backend.log 2>&1 &
          echo "Backend started on port 8000"
          EOF

          cat > deployment/start_frontend.sh << 'EOF'
          #!/bin/bash
          set -e
          echo "Starting frontend..."
          pip install -r requirements.txt
          # Kill existing process if running
          lsof -ti:8501 | xargs kill -9 2>/dev/null || true
          # Start frontend in background
          nohup streamlit run frontend.py --server.port 8501 --server.address 0.0.0.0 > frontend.log 2>&1 &
          echo "Frontend started on port 8501"
          EOF

          chmod +x deployment/*.sh

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: crop-predictor-package
          path: deployment/
          retention-days: 7
